// Mocks generated by Mockito 5.4.0 from annotations
// in atba_application/test/features/feature_charge_sim/presentation/block/charge_sim_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:atba_application/core/params/charge_sim_param.dart' as _i7;
import 'package:atba_application/core/resources/data_state.dart' as _i3;
import 'package:atba_application/features/feature_charge_sim/domain/entities/charge_sim_entity.dart'
    as _i6;
import 'package:atba_application/features/feature_charge_sim/domain/entities/get_balance_entity_csim.dart'
    as _i9;
import 'package:atba_application/features/feature_charge_sim/domain/repository/charge_sim_repository.dart'
    as _i2;
import 'package:atba_application/features/feature_charge_sim/domain/use_cases/charge_sim_usecase.dart'
    as _i4;
import 'package:atba_application/features/feature_charge_sim/domain/use_cases/get_balance_usecase.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeChargeSimRepository_0 extends _i1.SmartFake
    implements _i2.ChargeSimRepository {
  _FakeChargeSimRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDataState_1<T> extends _i1.SmartFake implements _i3.DataState<T> {
  _FakeDataState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ChargeSimUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockChargeSimUseCase extends _i1.Mock implements _i4.ChargeSimUseCase {
  MockChargeSimUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ChargeSimRepository get chargeSimRepository => (super.noSuchMethod(
        Invocation.getter(#chargeSimRepository),
        returnValue: _FakeChargeSimRepository_0(
          this,
          Invocation.getter(#chargeSimRepository),
        ),
      ) as _i2.ChargeSimRepository);
  @override
  _i5.Future<_i3.DataState<_i6.ChargeSimEntity>> call(
          _i7.ChargeSimParam? chargeSimParam) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [chargeSimParam],
        ),
        returnValue: _i5.Future<_i3.DataState<_i6.ChargeSimEntity>>.value(
            _FakeDataState_1<_i6.ChargeSimEntity>(
          this,
          Invocation.method(
            #call,
            [chargeSimParam],
          ),
        )),
      ) as _i5.Future<_i3.DataState<_i6.ChargeSimEntity>>);
}

/// A class which mocks [GetBalanceUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetBalanceUseCase extends _i1.Mock implements _i8.GetBalanceUseCase {
  MockGetBalanceUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ChargeSimRepository get chargeSimRepository => (super.noSuchMethod(
        Invocation.getter(#chargeSimRepository),
        returnValue: _FakeChargeSimRepository_0(
          this,
          Invocation.getter(#chargeSimRepository),
        ),
      ) as _i2.ChargeSimRepository);
  @override
  _i5.Future<_i3.DataState<_i9.GetBalanceEntity>> call(String? Void) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [Void],
        ),
        returnValue: _i5.Future<_i3.DataState<_i9.GetBalanceEntity>>.value(
            _FakeDataState_1<_i9.GetBalanceEntity>(
          this,
          Invocation.method(
            #call,
            [Void],
          ),
        )),
      ) as _i5.Future<_i3.DataState<_i9.GetBalanceEntity>>);
}
